Пакеты:
- Model - описание сущностей с которыми мы работаем
- Repository - репозиторные классы, которые отвечают за взаимодействие с БД
- Service - логика и обертка для репозиторного класса
- REST - пакет в котором будут REST контроллеры, которые и будут обеспечивать
взаимодействие с внешним миром
CustomerApplication - главный класс приложения, который запускает всю магию.

-------------------------
Магия Spring Date
Для того чтобы обеспечить взаимодействие нашего приложения с БД мы просто
создадим интерфейс, который будет наследовать JpaRepository. Благодаря этому
мы получаем возможность оперировать многими методами (такими как findAll,
findOne и т.д.)

------------------------
Подтянем с помощью Autowired customerRepository. @Autowired означает что мы
получим, инициализируем из контекста данную сущность.

----------------
Т.к. мы работаем с REST. Нам бы хотелось ResponseEntity

-----------------------
Т.к. нашего customer мы будем получать из тела запроса, то ставим анотацию
@RequestBody. И для валидации ставим анотацию @Valid.

-------------------------
@SpringBootApplication
public class CustomerApplication {
    public static void main(String[] args) {
        SpringApplication.run(CustomerApplication.class);
    }
} - это магия Spring Boot

После анотации @SpringBootApplication Spring понимает, что наш данный класс
является как-бы стартовой точкой приложения

------------------------
spring.datasource.initialize=true - инициализируем при запуске данные
spring.datasource.schema=classpath:database/initDB.sql - отвечает за создание таблиц
и место нахожюение файла
spring.datasource.data=classpath:database/populateDB.sql - твечает за наплнение таблиц
 и место нахожюение файла

---------------------------------------
В реальном приложении вместо использования файла для создания БД мы бы использовали либо
 liquibase, flyware (добрый день. а в мире java и в частности spring, для версионирования db,
 миграции использовать не принято? Да, конечно. В видео сказано, что в реальном проекте мы бы
 использовали миграции liquibase, flyware и т.д. Есть специальные средства для миграции БД.
 Они дают возможность отслеживать что, когда и кем было изменено в БД.
 https://www.liquibase.org/ и  https://flywaydb.org/ - это наиболее популярные)
